# Generated by Django 2.1.7 on 2019-06-22 15:52

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('active', models.BooleanField(default=True)),
                ('staff', models.BooleanField(default=False)),
                ('admin', models.BooleanField(default=False)),
                ('bio', models.TextField(blank=True, help_text='User bio of themselves.', max_length=500, null=True)),
                ('saved_recipes', models.IntegerField(blank=True, null=True)),
                ('subscribed_chefs', models.IntegerField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Chef',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chef_url', models.URLField(blank=True, default='', max_length=500)),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Crawled',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crawled_url', models.URLField(blank=True, default='', max_length=500)),
                ('source', models.CharField(max_length=80)),
            ],
        ),
        migrations.CreateModel(
            name='Diet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('atkins', models.BooleanField(default=False)),
                ('zone', models.BooleanField(default=False)),
                ('ketogenic', models.BooleanField(default=False)),
                ('vegetarian', models.BooleanField(default=False)),
                ('vegan', models.BooleanField(default=False)),
                ('weight_watchers', models.BooleanField(default=False)),
                ('south_beach', models.BooleanField(default=False)),
                ('raw', models.BooleanField(default=False)),
                ('mediterranean', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Direction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('direction_text', models.CharField(blank=True, default='', max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.CharField(max_length=200)),
                ('quantity', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_item', models.CharField(max_length=200)),
                ('qty', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('recipe_url', models.URLField(blank=True, default='', max_length=500, unique=True)),
                ('prep_time', models.CharField(max_length=10)),
                ('cook_time', models.CharField(max_length=10)),
                ('chef', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recipes_app.Chef')),
                ('directions', models.ManyToManyField(to='recipes_app.Direction')),
                ('ingredients', models.ManyToManyField(to='recipes_app.Ingredient')),
            ],
        ),
        migrations.CreateModel(
            name='TaggedFood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recipes_app.Recipe')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes_app_taggedfood_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='recipe',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='recipes_app.TaggedFood', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='profile',
            name='diet',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='recipes_app.Diet'),
        ),
        migrations.AddField(
            model_name='profile',
            name='inventory',
            field=models.ManyToManyField(blank=True, to='recipes_app.Inventory'),
        ),
    ]
